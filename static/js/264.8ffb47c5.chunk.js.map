{"version":3,"file":"static/js/264.8ffb47c5.chunk.js","mappings":"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","sources":["components/Services/tmdbAPI.js","components/MovieSearch/MovieSearch.js","components/SearchItems/SearchItems.js","pages/Movies.js"],"sourcesContent":["import axios from 'axios';\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default async function serviceTmdbAPI(searchQuery, param = {}) {\r\n  const API_KEY = '3d1fae92642db152fb96a11121415088';\r\n\r\n  const config = {\r\n    method: 'get',\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n    headers: { accept: 'application/json' },\r\n    params: {\r\n      api_key: API_KEY,\r\n      ...param,\r\n    },\r\n  };\r\n\r\n  const response = await axios.get(searchQuery, config);\r\n  return response.data;\r\n}\r\n\r\n// serviceTmdbAPI.propTypes = {\r\n//   searchQuery: PropTypes.string.isRequired,\r\n//   page: PropTypes.number.isRequired,\r\n//   hitsPerPage: PropTypes.number,\r\n// };\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\nimport { FaSistrix } from 'react-icons/fa';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const MovieSearchBar = props => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [prevSearchQuery, setPrevSearchQuery] = useState('');\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const findMovie = searchParams.get('findMovie') ?? '';\r\n\r\n  const isFirstLoad = useRef(true);\r\n\r\n  const updateQueryString = e => {\r\n    const value = e.currentTarget.value;\r\n    if (value === '') {\r\n      setSearchQuery('');\r\n      setSearchParams({});\r\n      return;\r\n    }\r\n\r\n    setSearchParams({ findMovie: value });\r\n    setSearchQuery(value);\r\n  };\r\n\r\n  const handleFormSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!searchQuery) {\r\n      toast.info('Please write search query.');\r\n      return;\r\n    }\r\n\r\n    if (searchQuery === prevSearchQuery) {\r\n      toast.info(\r\n        `\"${searchQuery}\" search completed. Enter a different search query`\r\n      );\r\n      return;\r\n    }\r\n\r\n    setPrevSearchQuery(searchQuery);\r\n    props.formSubmitHandler(searchQuery);\r\n    setSearchQuery('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (findMovie && isFirstLoad.current) {\r\n      setPrevSearchQuery(findMovie);\r\n      props.formSubmitHandler(findMovie);\r\n    }\r\n    isFirstLoad.current = false;\r\n  }, [setPrevSearchQuery, props, findMovie, isFirstLoad]);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <input\r\n          name=\"searchQuery\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search movie\"\r\n          onChange={updateQueryString}\r\n          value={searchQuery}\r\n        />\r\n        <button type=\"submit\">\r\n          <FaSistrix style={{ width: 20, height: 20 }} />\r\n          <span>Search</span>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { Link, useLocation } from 'react-router-dom';\r\n\r\nexport const SearchItems = ({ items }) => {\r\n  const location = useLocation();\r\n\r\n  return items.length !== 0 ? (\r\n    items.map(item => {\r\n      return (\r\n        <li key={item.id}>\r\n          <Link to={`/movies/${item.id}`} state={{ from: location }}>\r\n            {item.title || item.name}\r\n          </Link>\r\n        </li>\r\n      );\r\n    })\r\n  ) : (\r\n    <li>\r\n      <p>Nothing was found for your request. Change it, search again</p>\r\n    </li>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { MovieSearchBar } from '../components/MovieSearch/MovieSearch';\r\nimport { Loader } from 'components/Loader/Loader';\r\nimport serviceTmdbAPI from '../components/Services/tmdbAPI';\r\nimport { SearchItems } from '../components/SearchItems/SearchItems';\r\n\r\nconst Movies = () => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(true);\r\n  const [searchItems, setSearchItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!searchQuery) {\r\n      return;\r\n    }\r\n    function fetchGalleryItems(searchQuery) {\r\n      setLoading(true);\r\n      setError(true);\r\n\r\n      serviceTmdbAPI('search/movie', { query: searchQuery })\r\n        .then(data => {\r\n          setSearchItems([...data.results]);\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n          setLoading(false);\r\n          setError(true);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n          setError(false);\r\n        });\r\n    }\r\n\r\n    fetchGalleryItems(searchQuery);\r\n  }, [searchQuery]);\r\n\r\n  const handlerSearchQuery = searchQuery => {\r\n    setSearchQuery(searchQuery);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MovieSearchBar formSubmitHandler={handlerSearchQuery} />\r\n      {loading && <Loader />}\r\n      <ul>{!error && <SearchItems items={searchItems} />}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["serviceTmdbAPI","searchQuery","param","API_KEY","config","method","baseURL","headers","accept","params","api_key","axios","response","data","MovieSearchBar","props","useState","setSearchQuery","prevSearchQuery","setPrevSearchQuery","useSearchParams","searchParams","setSearchParams","findMovie","get","isFirstLoad","useRef","useEffect","current","formSubmitHandler","onSubmit","e","preventDefault","toast","name","type","autoComplete","autoFocus","placeholder","onChange","value","currentTarget","style","width","height","SearchItems","items","location","useLocation","length","map","item","to","id","state","from","title","loading","setLoading","error","setError","searchItems","setSearchItems","query","then","results","catch","console","finally","fetchGalleryItems","Loader"],"sourceRoot":""}