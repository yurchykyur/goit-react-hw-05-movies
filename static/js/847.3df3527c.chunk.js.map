{"version":3,"file":"static/js/847.3df3527c.chunk.js","mappings":"uNAGe,SAAeA,EAA9B,kC,aAAe,O,oBAAA,WAA8BC,GAA9B,gGAA2CC,EAA3C,+BAAmD,CAAC,EAC3DC,EAAU,mCAEVC,EAAS,CACbC,OAAQ,MACRC,QAAS,gCACTC,QAAS,CAAEC,OAAQ,oBACnBC,QAAO,QACLC,QAASP,GACND,IATM,SAaUS,EAAAA,EAAAA,IAAUV,EAAaG,GAbjC,cAaPQ,EAbO,yBAcNA,EAASC,MAdH,mE,iHCkFf,UA/EqB,WAAO,IAAD,IACzB,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAoB3D,OAlBAC,EAAAA,EAAAA,YAAU,YACR,SAA2BR,IACzBrB,EAAAA,EAAAA,GAAe,SAAD,OAAUqB,IACrBS,MAAK,SAAAjB,GACJG,GAAa,UAAKH,IAClBK,GAAU,OAAIL,EAAKI,QACpB,IACAc,OAAM,SAAAZ,GACLa,QAAQb,MAAMA,GACdC,GAAS,EACV,IACAa,SAAQ,WACPb,GAAS,EACV,GACJ,CACDc,CAAkBb,EACnB,GAAE,CAACA,KAGF,iCACE,SAAC,KAAD,CAAMc,GAAIV,EAAoBW,QAA9B,SAAuC,iBACrCjB,IACA,4BACE,4BACE,0BACE,gBACEkB,MAAM,QACNC,IACEvB,EAAUwB,YAAV,yCACsCxB,EAAUwB,aADhD,6EAIFC,IAAKzB,EAAU0B,OAAS1B,EAAU2B,UAGtC,4BACE,wBAAK3B,EAAU0B,OAAS1B,EAAU2B,QAElC,wBAAI,cACJ,uBAAI3B,EAAU4B,YAEd,wBAAI,YACJ,uBACqB,IAAlB1B,EAAO2B,OACN3B,EAAO4B,KAAI,SAAAC,GACT,OAAO,0BAAwBA,EAAMJ,MAAnBI,EAAMJ,KACzB,KAED,0BAAM,2BAKd,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CAAMP,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,kBAGvB,SAAC,EAAAY,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,MACU,SAKrB,C","sources":["components/Services/tmdbAPI.js","pages/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default async function serviceTmdbAPI(searchQuery, param = {}) {\r\n  const API_KEY = '3d1fae92642db152fb96a11121415088';\r\n\r\n  const config = {\r\n    method: 'get',\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n    headers: { accept: 'application/json' },\r\n    params: {\r\n      api_key: API_KEY,\r\n      ...param,\r\n    },\r\n  };\r\n\r\n  const response = await axios.get(searchQuery, config);\r\n  return response.data;\r\n}\r\n\r\n// serviceTmdbAPI.propTypes = {\r\n//   searchQuery: PropTypes.string.isRequired,\r\n//   page: PropTypes.number.isRequired,\r\n//   hitsPerPage: PropTypes.number,\r\n// };\r\n","import { useEffect, useState, useRef, Suspense } from 'react';\r\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\r\n\r\nimport serviceTmdbAPI from '../components/Services/tmdbAPI';\r\nimport { Loader } from 'components/Loader/Loader';\r\n\r\nconst MovieDetails = () => {\r\n  const [movieItem, setMovieItem] = useState({});\r\n  const [genres, setGenres] = useState([]);\r\n  const [error, setError] = useState(true);\r\n  const { movieId } = useParams();\r\n  const location = useLocation();\r\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\r\n\r\n  useEffect(() => {\r\n    function fetchTendingItems(movieId) {\r\n      serviceTmdbAPI(`movie/${movieId}`)\r\n        .then(data => {\r\n          setMovieItem({ ...data });\r\n          setGenres([...data.genres]);\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n          setError(true);\r\n        })\r\n        .finally(() => {\r\n          setError(false);\r\n        });\r\n    }\r\n    fetchTendingItems(movieId);\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      <Link to={backLinkLocationRef.current}>--- Go back</Link>\r\n      {!error && (\r\n        <div>\r\n          <div>\r\n            <div>\r\n              <img\r\n                width=\"300px\"\r\n                src={\r\n                  movieItem.poster_path\r\n                    ? `https://image.tmdb.org/t/p/w500${movieItem.poster_path}`\r\n                    : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\r\n                }\r\n                alt={movieItem.title || movieItem.name}\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2>{movieItem.title || movieItem.name}</h2>\r\n\r\n              <h3>Overview</h3>\r\n              <p>{movieItem.overview}</p>\r\n\r\n              <h3>Genres</h3>\r\n              <p>\r\n                {genres.length !== 0 ? (\r\n                  genres.map(genre => {\r\n                    return <span key={genre.name}>{genre.name}</span>;\r\n                  })\r\n                ) : (\r\n                  <span>Unknown genre</span>\r\n                )}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <h3>Additionsl information</h3>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"Cast\">Cast</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"Reviews\">Reviews</Link>\r\n            </li>\r\n          </ul>\r\n          <Suspense fallback={<Loader />}>\r\n            <Outlet />\r\n          </Suspense>{' '}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n"],"names":["serviceTmdbAPI","searchQuery","param","API_KEY","config","method","baseURL","headers","accept","params","api_key","axios","response","data","useState","movieItem","setMovieItem","genres","setGenres","error","setError","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","then","catch","console","finally","fetchTendingItems","to","current","width","src","poster_path","alt","title","name","overview","length","map","genre","Suspense","fallback"],"sourceRoot":""}